# this is ran with testdir as cwd
set -e

rm -fr dirForTest8

cp -r @PCRASTER_DATA_DIR@/test/python_modelling_framework/validated/ .
cp @PCRASTER_DATA_DIR@/test/python_modelling_framework/clone.map .
cp @PCRASTER_DATA_DIR@/test/python_modelling_framework/runoff.py .
cp @PCRASTER_DATA_DIR@/test/python_modelling_framework/samples2.map .
cp @PCRASTER_DATA_DIR@/test/python_modelling_framework/timeseries.tss .

cp @CMAKE_CURRENT_SOURCE_DIR@/../UnitTests/staticTestModels.py .
cp @CMAKE_CURRENT_SOURCE_DIR@/../UnitTests/dynamicTestModels.py .
cp @CMAKE_CURRENT_SOURCE_DIR@/../UnitTests/mcTestModels.py .
cp @CMAKE_CURRENT_SOURCE_DIR@/../UnitTests/pfTestModels.py .
cp @CMAKE_CURRENT_SOURCE_DIR@/../UnitTests/*{t,T}est* .

cp @PCRASTER_DATA_DIR@/test/python_modelling_framework/validated/plus.Result.map plus.map

cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/rainstat.map .
cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/mask.map .
cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/soil.map .
cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/dem.map .
cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/infilcap.tbl .
cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/rain.tss .
cp @PCRASTER_DATA_DIR@/demo/python_modelling_framework/deterministic/samples.map .



# Create test data.
export PCROPTIONS=--nothing

gdalTranslate="@GDAL_TRANSLATE@ -quiet"

west=0.0
south=0.0
cellSize=5.0
nrCols=2
nrRows=3
nodataValue=999
nrRealisations=99

asciiGridHeader="\
NCOLS $nrCols\n\
NROWS $nrRows\n\
XLLCORNER $west\n\
YLLCORNER $south\n\
CELLSIZE $cellSize"

echo -e $asciiGridHeader            > clone-2x3.col
echo NODATA_VALUE ${nodataValue}.0 >> clone-2x3.col
echo $nodataValue $nodataValue     >> clone-2x3.col
echo $nodataValue $nodataValue     >> clone-2x3.col
echo $nodataValue $nodataValue     >> clone-2x3.col
$gdalTranslate -ot Int32 -mo "PCRASTER_VALUESCALE=VS_BOOLEAN" -of PCRaster clone-2x3.col clone-2x3.map

# For each realisation...
for((i = 1; i <= $nrRealisations; ++i)); do
  # Create directory.
  mkdir -p $i

  # +-----+-----+    +---+---+
  # |  99 | 100 |    | 1 | 2 |
  # +-----+-----+    +---+---+
  # | 101 | 102 | -> | 3 | 4 |
  # +-----+-----+    +---+---+
  # | 103 | 104 |    | 5 | 6 |
  # +-----+-----+    +---+---+
  let value=$i
  let v1=$nrRealisations+1-$value
  let v2=$nrRealisations+2-$value
  let v3=$nrRealisations+3-$value
  let v4=$nrRealisations+4-$value
  let v5=$nrRealisations+5-$value
  let v6=$nrRealisations+6-$value

  echo -e $asciiGridHeader            > $i/concentration.col
  echo NODATA_VALUE ${nodataValue}.0 >> $i/concentration.col
  echo ${v1}.0 ${v2}.0               >> $i/concentration.col
  echo ${v3}.0 ${v4}.0               >> $i/concentration.col
  echo ${v5}.0 ${v6}.0               >> $i/concentration.col

  $gdalTranslate -ot Float32 -mo "PCRASTER_VALUESCALE=VS_SCALAR" -of PCRaster $i/concentration.col $i/concentration_without_mv.map

  # Insert missing value in one cell in one realisation.
  if((v1 != 50)); then
    cp $i/concentration_without_mv.map $i/concentration_with_mv.map
  else
    let v1=$nodataValue
    let v2=$nodataValue
    let v3=$nodataValue
    let v4=$nodataValue
    let v5=$nodataValue
    let v6=$nodataValue

    echo -e $asciiGridHeader            > $i/concentration.col
    echo NODATA_VALUE ${nodataValue}.0 >> $i/concentration.col
    echo ${v1}.0 ${v2}.0               >> $i/concentration.col
    echo ${v3}.0 ${v4}.0               >> $i/concentration.col
    echo ${v5}.0 ${v6}.0               >> $i/concentration.col

    $gdalTranslate -ot Float32 -mo "PCRASTER_VALUESCALE=VS_SCALAR" -of PCRaster $i/concentration.col $i/concentration_with_mv.map
  fi
done
